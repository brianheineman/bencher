---
export const prerender = false;

import { BENCHER_API_URL, INTERNAL_API_URL } from "astro:env/server";
import { IS_BENCHER_CLOUD } from "astro:env/client";

import PerfLayout from "../../../layouts/perf/PerfLayout.astro";
import PublicProject from "../../../components/perf/PublicProject";
import type { JsonProject } from "../../../types/bencher";
import Tetris from "../../../components/site/Tetris.astro";
import Notification from "../../../components/site/Notification";
import { fetchSSR, hasPerfImage } from "../../../components/perf/util";
import FallbackPerfPanel from "../../../components/console/perf/FallbackPerfPanel.astro";
import * as Sentry from "@sentry/astro";

const params = Astro.params;
const getProjectUrl = `${INTERNAL_API_URL ?? BENCHER_API_URL}/v0/projects/${
	params.project
}`;

let jsonProject: undefined | JsonProject;
let title = "Public Project";
let description =
	"View continuous benchmarking results and performance regressions on Bencher";
let notFound = false;
if (params.project && params.project !== "undefined") {
	try {
		const projectResponse = await fetchSSR(getProjectUrl);
		jsonProject = await projectResponse.json();
		if (jsonProject?.uuid) {
			title = `${jsonProject?.name}`;
			description = `View ${jsonProject?.name} continuous benchmarking results and performance regressions on Bencher`;
		} else {
			title = "Not Found";
			description = "Public Project not found";
			notFound = true;
		}
	} catch (e) {
		console.error(`Failed to fetch project data: ${e}`);
		Sentry.captureException(e);
	}
}

let image: undefined | string;
if (hasPerfImage(Astro.url)) {
	image = `${INTERNAL_API_URL ?? BENCHER_API_URL}/v0/projects/${
		params.project
	}/perf/img${Astro.url.search}`;
}

// GitHub query for use of imgs:
// /https:\/\/api.bencher.dev\/v0\/projects\/.*\/perf/
---

<PerfLayout
  title={title}
  titleFmt={(title) => `ðŸ“ˆ ${title}`}
  description={description}
  published={jsonProject?.created}
  modified={jsonProject?.modified}
  image={image}
>
  { notFound ?
  <section class="section">
    <div class="container">
      <div class="columns">
        <div class="column">
          <h1 class="title is-1">Project Not Found</h1>
          <hr />
          <p>Could not find Project: <code>{params.project}</code></p>
          <p>The Project may be private or it may not exist.</p>
          <br />
          <a class="button" href="/perf">Go to Public Projects</a>
        </div>
        <div class="column">
          <Tetris />
        </div>
      </div>
    </div>
  </section>
  :
  <>
    <Notification client:only="solid-js" />
    <PublicProject client:only="solid-js" apiUrl={BENCHER_API_URL} isBencherCloud={IS_BENCHER_CLOUD} params={params} project={jsonProject}>
      <section slot="fallback" class="section">
        <div class="container">
          <div class="columns">
            <div class="column">
              <FallbackPerfPanel  />
            </div>
          </div>
        </div>
      </section>
    </PublicProject>
  </>
  }
</PerfLayout>
