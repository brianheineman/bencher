---
import { IS_BENCHER_CLOUD } from "astro:env/client";

import { DocsTab, DocsMenuId } from "./docs_tab.tsx";
import { type Language, defaultLang } from "../../../i18n/ui.ts";
import { getEnOnlyCollection, getLangCollection } from "../../../i18n/utils.ts";
import LangButton from "../../../i18n/LangButton.astro";
import Collection from "../../../util/collection.ts";
import DocsList from "./DocsList.astro";
import ApiList from "./ApiList.astro";
import LearnList from "./LearnList.astro";

interface Props {
	tab: DocsTab;
	lang?: undefined | string;
	collection?: undefined | Collection;
	slug?: undefined | string;
}

// Docs
const docsTutorialCollection = await getLangCollection(
	Collection.docs_tutorial,
);
const docsHowToCollection = await getLangCollection(Collection.docs_how_to);
const docsExplanationCollection = await getLangCollection(
	Collection.docs_explanation,
);
const docsReferenceCollection = await getLangCollection(
	Collection.docs_reference,
);

// Api
const apiOrganizationsCollection = await getEnOnlyCollection(
	Collection.api_organizations,
);
const apiProjectsCollection = await getEnOnlyCollection(
	Collection.api_projects,
);
const apiUsersCollection = await getEnOnlyCollection(Collection.api_users);
const apiServerCollection = await getEnOnlyCollection(Collection.api_server);

// Learn
const benchmarkingCppCollection = await getLangCollection(
	Collection.benchmarking_cpp,
);
const benchmarkingPythonCollection = await getLangCollection(
	Collection.benchmarking_python,
);
const benchmarkingRustCollection = await getLangCollection(
	Collection.benchmarking_rust,
);
const trackInCiCppCollection = await getLangCollection(
	Collection.track_in_ci_cpp,
);
const trackInCiPythonCollection = await getLangCollection(
	Collection.track_in_ci_python,
);
const trackInCiRustCollection = await getLangCollection(
	Collection.track_in_ci_rust,
);
const caseStudyCollection = await getLangCollection(Collection.case_study);
const engineeringCollection = await getLangCollection(Collection.engineering);

const { tab, collection, slug } = Astro.props;
const lang: Language = Astro.props.lang ?? defaultLang;

const tabClass = (tab: DocsTab, current: DocsTab) => {
	const isCurrent = (tab: DocsTab, current: DocsTab) => {
		switch (tab) {
			case DocsTab.Docs:
				return current === DocsTab.Docs;
			case DocsTab.Api:
				return current === DocsTab.Api;
			case DocsTab.Learn:
				return current === DocsTab.Learn;
		}
	};
	return isCurrent(tab, current) ? "is-active" : "";
};

const displayStyle = (menu: DocsMenuId, tab: DocsTab) => {
	const isVisible = (menu: DocsMenuId, tab: DocsTab) => {
		switch (menu) {
			case DocsMenuId.Docs:
				return tab === DocsTab.Docs;
			case DocsMenuId.Api:
				return tab === DocsTab.Api;
			case DocsMenuId.Learn:
				return tab === DocsTab.Learn;
		}
	};
	const marginBottom = (menu: DocsMenuId) => {
		switch (menu) {
			case DocsMenuId.Docs:
				return (
					1 +
					docsTutorialCollection[lang]?.length +
					1 +
					docsHowToCollection[lang]?.length +
					1 +
					docsExplanationCollection[lang]?.length +
					1 +
					docsReferenceCollection[lang]?.length
				);
			case DocsMenuId.Api:
				return (
					1 +
					apiOrganizationsCollection?.length +
					1 +
					apiProjectsCollection?.length +
					1 +
					apiUsersCollection?.length +
					1 +
					apiServerCollection?.length
				);
			case DocsMenuId.Learn:
				return (
					1 +
					benchmarkingCppCollection[lang]?.length +
					1 +
					benchmarkingPythonCollection[lang]?.length +
					1 +
					benchmarkingRustCollection[lang]?.length +
					1 +
					trackInCiCppCollection[lang]?.length +
					1 +
					trackInCiPythonCollection[lang]?.length +
					1 +
					trackInCiRustCollection[lang]?.length +
					1 +
					caseStudyCollection[lang]?.length +
					1 +
					engineeringCollection[lang]?.length
				);
		}
	};
	return `display: ${isVisible(menu, tab) ? "block" : "none"}; margin-bottom: ${
		marginBottom(menu) * 1.5
	}rem;`;
};
---

<aside class="menu is-sticky">
  <LangButton lang={lang} tab={tab} collection={collection} slug={slug} />
  <!-- Docs -->
  <div class="tabs is-centered">
    <ul>
      {IS_BENCHER_CLOUD && <li id={DocsTab.Docs} class={tabClass(DocsTab.Docs, tab)}><a>Docs</a></li>}
      <li id={DocsTab.Api} class={tabClass(DocsTab.Api, tab)}><a>API</a></li>
      {IS_BENCHER_CLOUD && <li id={DocsTab.Learn} class={tabClass(DocsTab.Learn, tab)}><a>Learn</a></li>}
    </ul>
  </div>
  <nav id={DocsMenuId.Docs} style={displayStyle(DocsMenuId.Docs, tab)}>
    <DocsList lang={lang} />
  </nav>
  <!-- API -->
  <nav id={DocsMenuId.Api} style={displayStyle(DocsMenuId.Api, tab)}>
    <ApiList lang={lang} />
  </nav>
  <!-- Learn -->
  <nav id={DocsMenuId.Learn} style={displayStyle(DocsMenuId.Learn, tab)}>
    <LearnList lang={lang} />
  </nav>
</aside>
<script>
  import {DocsTab, DocsMenuId} from "./docs_tab";

  // Find all buttons with the `alert` class on the page.
  const docsTab = document.getElementById(DocsTab.Docs);
  const apiTab = document.getElementById(DocsTab.Api);
  const learnTab = document.getElementById(DocsTab.Learn);

  const docsMenu = document.getElementById(DocsMenuId.Docs);
  const apiMenu = document.getElementById(DocsMenuId.Api);
  const learnMenu = document.getElementById(DocsMenuId.Learn);

  function setDocs() {
    docsTab?.classList.add("is-active");
    apiTab?.classList.remove("is-active");
    learnTab?.classList.remove("is-active");

    docsMenu ? docsMenu.style.display = "block" : null;
    apiMenu ? apiMenu.style.display = "none" : null;
    learnMenu ? learnMenu.style.display = "none" : null;
  }

  function setApi() {
    docsTab?.classList.remove("is-active");
    apiTab?.classList.add("is-active");
    learnTab?.classList.remove("is-active");

    docsMenu ? docsMenu.style.display = "none" : null;
    apiMenu ? apiMenu.style.display = "block" : null;
    learnMenu ? learnMenu.style.display = "none" : null;
  }

  function setLearn() {
    docsTab?.classList.remove("is-active");
    apiTab?.classList.remove("is-active");
    learnTab?.classList.add("is-active");

    docsMenu ? docsMenu.style.display = "none" : null;
    apiMenu ? apiMenu.style.display = "none" : null;
    learnMenu ? learnMenu.style.display = "block" : null;
  }

  docsTab?.addEventListener("click", () => {
    setDocs();
  });
  apiTab?.addEventListener("click", () => {
    setApi();
  });
  learnTab?.addEventListener("click", () => {
    setLearn();
  });
</script>