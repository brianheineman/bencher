---
import {
	THEME_TOGGLE_ID,
	LIGHT_THEME_ID,
	DARK_THEME_ID,
	LIGHT_THEME,
	DARK_THEME,
	BENCHER_THEME_KEY,
	DATA_THEME,
} from "./theme";
import {
	BENCHER_WORDMARK_LIGHT,
	BENCHER_WORDMARK_DARK,
	BENCHER_WORDMARK_ID,
} from "../../../util/ext";
---

<!-- `is:inline` to prevent FOUC -->
<script is:inline  define:vars={{ DATA_THEME, BENCHER_WORDMARK_ID, BENCHER_WORDMARK_LIGHT, BENCHER_WORDMARK_DARK, THEME_TOGGLE_ID, LIGHT_THEME_ID, DARK_THEME_ID, LIGHT_THEME, DARK_THEME, BENCHER_THEME_KEY }}>
  const themeToggle = document.getElementById(THEME_TOGGLE_ID);
  const sunIcon = document.getElementById(LIGHT_THEME_ID);
  const moonIcon = document.getElementById(DARK_THEME_ID);

  const setLightTheme = () => {
    const wordmark = document.getElementById(BENCHER_WORDMARK_ID);
    if (wordmark) {
      wordmark.src = BENCHER_WORDMARK_LIGHT;
    }
    themeToggle ? themeToggle.title = "Toggle dark mode" : null;
    sunIcon?.classList.remove("has-text-grey");
    sunIcon?.classList.remove("has-text-dark");
    sunIcon?.classList.add("has-text-primary");
    moonIcon?.classList.remove("has-text-grey");
    moonIcon?.classList.remove("has-text-primary");
    moonIcon?.classList.add("has-text-light");
  }
  const setDarkTheme = () => {
    const wordmark = document.getElementById(BENCHER_WORDMARK_ID);
    if (wordmark) {
      wordmark.src = BENCHER_WORDMARK_DARK;
    }
    themeToggle ? themeToggle.title = "Toggle light mode" : null;
    sunIcon?.classList.remove("has-text-grey");
    sunIcon?.classList.remove("has-text-primary");
    sunIcon?.classList.add("has-text-dark");
    moonIcon?.classList.remove("has-text-grey");
    moonIcon?.classList.remove("has-text-light");
    moonIcon?.classList.add("has-text-primary");
  }
  const setTheme = (theme) => {
    switch (theme) {
      case LIGHT_THEME:
        setLightTheme();
        break;
      case DARK_THEME:
        setDarkTheme();
        break;
      default:
        console.error(`Invalid theme: ${theme}`);
        return;
    }
    document.documentElement.setAttribute(DATA_THEME, theme);
  }

  const getColorScheme = () => {
    if (window.matchMedia("(prefers-color-scheme: light)").matches) {
		  return LIGHT_THEME;
	  }
	  if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
		  return DARK_THEME;
	  }
    return;
  };
  const getCachedTheme = () => {
    if (typeof localStorage !== "undefined") {
      const theme = localStorage.getItem(BENCHER_THEME_KEY);
      switch (theme) {
        case LIGHT_THEME:
        case DARK_THEME:
          return theme;
        case null:
          return null;
        default:
          localStorage.removeItem(BENCHER_THEME_KEY);
      }
    }
    return null;
  };
  const getTheme = () => getCachedTheme() ?? getColorScheme();

  const initTheme = () => setTheme(getTheme());

  const storeTheme = (theme) => window.localStorage.setItem(BENCHER_THEME_KEY, theme);

  const toggleTheme = () => {
    const theme = getTheme();
    switch (theme) {
      case LIGHT_THEME:
        setTheme(DARK_THEME);
        storeTheme(DARK_THEME);
        break;
      case DARK_THEME:
        setTheme(LIGHT_THEME);
        storeTheme(LIGHT_THEME);
        break;
      default:
        console.error(`Invalid toggle theme: ${theme}`);
        return;
    }
  }

  initTheme();
  themeToggle?.addEventListener("click", toggleTheme);
</script>
